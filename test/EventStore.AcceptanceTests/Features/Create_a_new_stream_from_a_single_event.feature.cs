// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EventStore.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CreateANewStreamFromOneOrMoreEventsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "streams",
                "create_stream"};
        
#line 1 "Create_a_new_stream_from_a_single_event.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create a new stream from one or more events", "    Creating a new stream when one or more events are published with required and" +
                    " optional values.", ProgrammingLanguage.CSharp, new string[] {
                        "streams",
                        "create_stream"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Create a new stream from one or more events")))
            {
                global::EventStore.AcceptanceTests.Features.CreateANewStreamFromOneOrMoreEventsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void PublishEvents(string scenario_Name, string stream, string events, string published_Events, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "single_event"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("scenario_name", scenario_Name);
            argumentsOfScenario.Add("stream", stream);
            argumentsOfScenario.Add("events", events);
            argumentsOfScenario.Add("published_events", published_Events);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publish events", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given(string.Format("\'{0}\' does not exist", stream), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.When(string.Format("\'{0}\' are published", events), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
    testRunner.Then(string.Format("\'{0}\' contains \'{1}\'", stream, published_Events), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Publish events: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Create a new stream from one or more events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("create_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("single_event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "OnlyRequiredProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "ToPublish.Single.OnlyRequiredProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:published_events", "Published.Single.OnlyRequiredProperties")]
        public virtual void PublishEvents_Variant0()
        {
#line 6
this.PublishEvents("OnlyRequiredProperties", "aggregate-1", "ToPublish.Single.OnlyRequiredProperties", "Published.Single.OnlyRequiredProperties", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Publish events: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Create a new stream from one or more events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("create_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("single_event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "AllProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "ToPublish.Single.AllProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:published_events", "Published.Single.AllProperties")]
        public virtual void PublishEvents_Variant1()
        {
#line 6
this.PublishEvents("AllProperties", "aggregate-1", "ToPublish.Single.AllProperties", "Published.Single.AllProperties", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Publish events: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Create a new stream from one or more events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("create_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("single_event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "OnlyRequiredProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "ToPublish.Multiple.OnlyRequiredProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:published_events", "Published.Multiple.OnlyRequiredProperties")]
        public virtual void PublishEvents_Variant2()
        {
#line 6
this.PublishEvents("OnlyRequiredProperties", "aggregate-1", "ToPublish.Multiple.OnlyRequiredProperties", "Published.Multiple.OnlyRequiredProperties", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Publish events: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Create a new stream from one or more events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("create_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("single_event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "AllProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "ToPublish.Multiple.AllProperties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:published_events", "Published.Multiple.AllProperties")]
        public virtual void PublishEvents_Variant3()
        {
#line 6
this.PublishEvents("AllProperties", "aggregate-1", "ToPublish.Multiple.AllProperties", "Published.Multiple.AllProperties", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
