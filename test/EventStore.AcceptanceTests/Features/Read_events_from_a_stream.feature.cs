// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EventStore.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReadEventsFromAStreamFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = new string[] {
                "streams",
                "read_stream"};
        
#line 1 "Read_events_from_a_stream.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Read events from a stream", "    Read the events from a stream", ProgrammingLanguage.CSharp, new string[] {
                        "streams",
                        "read_stream"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Read events from a stream")))
            {
                global::EventStore.AcceptanceTests.Features.ReadEventsFromAStreamFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events when stream does not exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("missing_stream")]
        public virtual void ReadEventsWhenStreamDoesNotExist()
        {
            string[] tagsOfScenario = new string[] {
                    "missing_stream"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read events when stream does not exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given("\'aggregate-1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.Then("\'aggregate-1\' contains no events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void ReadAllEvents(string scenario_Name, string stream, string events, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "all_events"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("scenario_name", scenario_Name);
            argumentsOfScenario.Add("stream", stream);
            argumentsOfScenario.Add("events", events);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read all events", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
    testRunner.Given(string.Format("{0} does exist", stream), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.Then(string.Format("{0} contains {1}", stream, events), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read all events: SingleEvent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("all_events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "SingleEvent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "SingleEvent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.SingleEvent")]
        public virtual void ReadAllEvents_SingleEvent()
        {
#line 11
this.ReadAllEvents("SingleEvent", "aggregate-1", "Published.Existing.SingleEvent", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read all events: TwoEvents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("all_events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TwoEvents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "TwoEvents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.TwoEvents")]
        public virtual void ReadAllEvents_TwoEvents()
        {
#line 11
this.ReadAllEvents("TwoEvents", "aggregate-1", "Published.Existing.TwoEvents", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read all events: ManyEvents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("all_events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "ManyEvents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "ManyEvents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.ManyEvents")]
        public virtual void ReadAllEvents_ManyEvents()
        {
#line 11
this.ReadAllEvents("ManyEvents", "aggregate-1", "Published.Existing.ManyEvents", ((string[])(null)));
#line hidden
        }
        
        public virtual void ReadEventsAfter(string scenario_Name, string stream, string after, string events, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "events_after_date"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("scenario_name", scenario_Name);
            argumentsOfScenario.Add("stream", stream);
            argumentsOfScenario.Add("after", after);
            argumentsOfScenario.Add("events", events);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read events after", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
    testRunner.Given(string.Format("{0} does exist", stream), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
    testRunner.Then(string.Format("{0} {1} contains {2}", stream, after, events), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events after: 2000_01_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_after_date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:after", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.After_1400_GMT")]
        public virtual void ReadEventsAfter_2000_01_01_1400_GMT()
        {
#line 22
this.ReadEventsAfter("2000_01_01_1400_GMT", "aggregate-1", "2000-01-01T00:00:00+00:00:00", "Published.Existing.After_1400_GMT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events after: 2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_after_date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:after", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.After_Midnight_GMT")]
        public virtual void ReadEventsAfter_2000_01_01_Midnight_GMT()
        {
#line 22
this.ReadEventsAfter("2000_01_01_Midnight_GMT", "aggregate-1", "2000-01-01T00:00:00+00:00:00", "Published.Existing.After_Midnight_GMT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events after: 2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_after_date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:after", "2000-01-01T00:00:00-04:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.After_Midnight_EST")]
        public virtual void ReadEventsAfter_2000_01_01_Midnight_EST()
        {
#line 22
this.ReadEventsAfter("2000_01_01_Midnight_EST", "aggregate-1", "2000-01-01T00:00:00-04:00:00", "Published.Existing.After_Midnight_EST", ((string[])(null)));
#line hidden
        }
        
        public virtual void ReadEventsBefore(string scenario_Name, string stream, string before, string events, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "events_before_date"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("scenario_name", scenario_Name);
            argumentsOfScenario.Add("stream", stream);
            argumentsOfScenario.Add("before", before);
            argumentsOfScenario.Add("events", events);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read events before", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
    testRunner.Given(string.Format("{0} does exist", stream), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
    testRunner.Then(string.Format("{0} {1} contains {2}", stream, before, events), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events before: 2000_01_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_before_date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:before", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.Before_1400_GMT")]
        public virtual void ReadEventsBefore_2000_01_01_1400_GMT()
        {
#line 33
this.ReadEventsBefore("2000_01_01_1400_GMT", "aggregate-1", "2000-01-01T00:00:00+00:00:00", "Published.Existing.Before_1400_GMT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events before: 2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_before_date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:before", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.Before_Midnight_GMT")]
        public virtual void ReadEventsBefore_2000_01_01_Midnight_GMT()
        {
#line 33
this.ReadEventsBefore("2000_01_01_Midnight_GMT", "aggregate-1", "2000-01-01T00:00:00+00:00:00", "Published.Existing.Before_Midnight_GMT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events before: 2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_before_date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:before", "2000-01-01T00:00:00-04:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.Before_Midnight_EST")]
        public virtual void ReadEventsBefore_2000_01_01_Midnight_EST()
        {
#line 33
this.ReadEventsBefore("2000_01_01_Midnight_EST", "aggregate-1", "2000-01-01T00:00:00-04:00:00", "Published.Existing.Before_Midnight_EST", ((string[])(null)));
#line hidden
        }
        
        public virtual void ReadEventsBetweem(string scenario_Name, string stream, string start, string end, string events, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "events_between_dates"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("scenario_name", scenario_Name);
            argumentsOfScenario.Add("stream", stream);
            argumentsOfScenario.Add("start", start);
            argumentsOfScenario.Add("end", end);
            argumentsOfScenario.Add("events", events);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read events betweem", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
    testRunner.Given(string.Format("{0} does exist", stream), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
    testRunner.Then(string.Format("{0} between {1} {2} contains {3}", stream, start, end, events), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events betweem: 2000_01_01_1400__2000_02_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_between_dates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_1400__2000_02_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_1400__2000_02_01_1400_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:start", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:end", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.Before_1400_GMT")]
        public virtual void ReadEventsBetweem_2000_01_01_1400__2000_02_01_1400_GMT()
        {
#line 44
this.ReadEventsBetweem("2000_01_01_1400__2000_02_01_1400_GMT", "aggregate-1", "2000-01-01T00:00:00+00:00:00", "2000-01-01T00:00:00+00:00:00", "Published.Existing.Before_1400_GMT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events betweem: 2000_01_01_Midnight__2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_between_dates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_Midnight__2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_Midnight__2000_01_01_Midnight_GMT")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:start", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:end", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.Before_Midnight_GMT")]
        public virtual void ReadEventsBetweem_2000_01_01_Midnight__2000_01_01_Midnight_GMT()
        {
#line 44
this.ReadEventsBetweem("2000_01_01_Midnight__2000_01_01_Midnight_GMT", "aggregate-1", "2000-01-01T00:00:00+00:00:00", "2000-01-01T00:00:00+00:00:00", "Published.Existing.Before_Midnight_GMT", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Read events betweem: 2000_01_01_Midnight__2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Read events from a stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("streams")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("read_stream")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("events_between_dates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2000_01_01_Midnight__2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:scenario_name", "2000_01_01_Midnight__2000_01_01_Midnight_EST")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:stream", "aggregate-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:start", "2000-01-01T00:00:00-04:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:end", "2000-01-01T00:00:00+00:00:00")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:events", "Published.Existing.Before_Midnight_EST")]
        public virtual void ReadEventsBetweem_2000_01_01_Midnight__2000_01_01_Midnight_EST()
        {
#line 44
this.ReadEventsBetweem("2000_01_01_Midnight__2000_01_01_Midnight_EST", "aggregate-1", "2000-01-01T00:00:00-04:00:00", "2000-01-01T00:00:00+00:00:00", "Published.Existing.Before_Midnight_EST", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
